/// ================  MERGE SORT ALGORITHM =================

#include <iostream>
using namespace std;

void merge(int arr[],int l, int mid, int r){
    int an = mid-l+1;
    int bn = r-mid;
    /// CREATING TWO TEMP ARRAYS
    int a[an],b[bn];
    
    /// FILLING THE EMPTY ARRAYS
    for(int i=0; i<an; i++)
    a[i] = arr[l+i];
    
    for(int j=0; j<bn; j++)
    b[j] = arr[mid+1+j];
    
    int i=0; /// INITIAL INDEX OF FIRST SUBARRAY ,a
    int j=0; /// INITIAL INDEX OF SECOND SUBARRAY ,b
    int k=l; /// INITIAL INDEX OF FINAL MERGED SUBARRAY
    
    while(i<an && j<bn){
        if(a[i]<b[j])
        arr[k++] = a[i++];
        else
        arr[k++] = b[j++];
    }
    
    while(i<an)
    arr[k++] = a[i++];
    
    while(j<bn)
    arr[k++] = b[j++];
    
    return;
}

void mergeSort(int arr[],int l,int r){
    int mid = (l+r)/2;
    if(l>=r) return; /// BASE CASE
    
    mergeSort(arr,l,mid);
    mergeSort(arr,mid+1,r);
    merge(arr,l,mid,r);
}

int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n;i++)
    cin>>arr[i];
    
    mergeSort(arr,0,n-1);
    for(int i=0; i<n;i++)
    cout<<arr[i]<<" ";
    cout<<endl;
    
    return 0;
}
